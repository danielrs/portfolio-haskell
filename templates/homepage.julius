// Calls 'before' when elemId is not yet out-of viewport from the top
// otherwise calls 'after'
(function($) {
	var created = 0;
	var index = {}; // holds id -> scope pairs

	$.fn.scrollCall = function(before, after) {
		var $doc = $(document);

		this.each(function() {
			var checkpointId = 'scrollcall-checkpoint-' + created;
			var $checkpoint = $('<div>', {
				id : checkpointId,
				class : 'scrollcall-checkpoint'
			});
			$(this).before($checkpoint);
			index['#' + checkpointId] = $(this);
			created++;
		});

		$doc.scroll(function() {
			$.each(index, function(i, scope) {
				if ($doc.scrollTop() < $(i).offset().top) {
					if (!$(i).data('before-done')) before.call(scope);
					$(i).data('before-done', true);
					$(i).data('after-done', false);
				} else {
					if (!$(i).data('after-done')) after.call(scope);
					$(i).data('before-done', false);
					$(i).data('after-done', true);
				}
			});
		});
		$(window).resize(function() {
			$doc.trigger('scroll');
		});
		$doc.trigger('scroll');
	};

})(jQuery);

// Adds typewriter effect animation to selected elements
(function($) {
	$.fn.type = function(targetStr, options) {

		// Checks if object given is a function. Taken from underscorejs source code
		function isFunction(obj) {
			return !!(obj && obj.constructor && obj.call && obj.apply);
		}

		// Drops the given number of characters from the end of the string
		function dropTail (string, n) {
			return string.substr(0, string.length - n);
		}

		// Returns a new string, 1 edit distance from current and closer to target
		function typeTo(current, target) {
			if (current !== target) {
				if (current.length < target.length) {
					var subTarget = target.substr(0, current.length);
					if (current !== subTarget) {
						return dropTail(current, 1);
					} else {
						return current + target.charAt(current.length);
					}
				} else {
					return dropTail(current, 1);
				}
			}
			return current;
		}

		// SETTINGS
		var settings = {
			caretChar: '_',
			caretClass: 'typejs__caret',
			ignoreContent: false,
			typeDelay: 50,
			onType: null,
			onBackspace: null,
			onFinish: null
		};
		$.extend(settings, options);

		return this.each(function() {

			// Sets up element
			var this_ = $(this);
			var text = this_.text();
			if (this_.children('.typejs__content').length > 0)
				text = this_.children('.typejs__content').text();

			var $content = $('<span>', { class: 'typejs__content', text: text});
			var $caret = $('<span>', { class: settings.caretClass, text: settings.caretChar });

			this_.empty();
			this_.append($content);
			this_.append($caret);

			function typeStep(current, target) {
				if (current !== target) {
					var newStr = typeTo(current, target);
					if (newStr.length > current.length && isFunction(settings.onType)) {
						settings.onType.call(this_);
					} else if (newStr.length < current.length && isFunction(settings.onBackspace)) {
						settings.onBackspace.call(this_)
					}
					$content.text(newStr);
					setTimeout(typeStep, settings.typeDelay, newStr, targetStr);
				} else if (isFunction(settings.onFinish)) {
					settings.onFinish.call(this_);
				}
			}

			setTimeout(typeStep, settings.typeDelay, $content.text(), targetStr);

		}); // each
	}; // function type
})(jQuery);

$(document).ready(function() {

	var $doc = $(document);
	var $body = $('html, body');
	var $goPageTop = $('#go-page-top');
	var fontSize = parseInt($('body').css('font-size'));

	$('#main-nav > ul > li > a').each(function() {
		var id = $(this).attr('href');
		$(this).on('click', function(e) {
			history.replaceState(null, '', id);
			var offset = $(id).offset().top - 2*fontSize - $('#main-nav ul').height();
			e.preventDefault();
			$body.stop();
			$body.animate({scrollTop: offset});
		});
	});
	if (window.location.hash) {
		$('#main-nav > ul > li > a[href="' + window.location.hash + '"]').trigger('click');
	}

	// Scroll events
	$('#main-nav').scrollCall(
		function() {
			console.log('before');
			// Nav bar
			var $dummy = $('#main-nav--dummy');
			this.removeClass('main-nav--fixed');
			this.css('height', 'auto');
			$dummy.remove();
			// Go top
			$goPageTop.addClass('go-page-top--hide');
		},
		function() {
			console.log('after');
			// Nav bar
			var $dummy = $('#main-nav--dummy');
			if ($dummy.length <= 0) $dummy = $('<div>', { id : 'main-nav--dummy' });
			$dummy.css('height', $('#main-nav').outerHeight(true));
			this.addClass('main-nav--fixed');
			this.after($dummy);
			// Go top
			$goPageTop.removeClass('go-page-top--hide');
		}
	);
	// When #go-page-top is clicked go back top
	$goPageTop.click(function(e) {
		e.preventDefault();
		history.replaceState(null, '', window.location.origin);
		$body.animate({ scrollTop: 0});
	});

	// Message notification
	var $message = $('#message');
	$message.addClass('message--fixed');
	$message.delay(4000).fadeOut();

	// Tagline typing
	function typeArray($elem, array) {
		var text = _.first(array);
		if (text !== undefined) {
			$elem.type(text, {
				onFinish: function() {
					setTimeout(function() { typeArray($elem, _.tail(array)); }, 500);
				}
			});
		}
	}
	typeArray($('#tagline'), ['Hello!', 'I\'m Daniel', 'and..', 'I\'m a programmer']);
});
